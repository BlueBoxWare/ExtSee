-Collections.kt
 aaa() on Collection<Any>: Unit
 -Collection
  aaa() on Collection<Any>
  contains(E): Boolean
  containsAll(Collection<E>): Boolean
  containsAll(kotlin.collections.Collection<T>) on Collection<T>
  count() on Collection<T>
  equals(Any?): Boolean
  forEach(Consumer<in E!>!): Unit
  hashCode(): Int
  indices on Collection<*>
  isEmpty(): Boolean
  isNotEmpty() on Collection<T>
  iterator(): Iterator<E>
  orEmpty() on Collection<T>?
  plus(kotlin.Array<out T>) on Collection<T>
  plus(kotlin.collections.Iterable<T>) on Collection<T>
  plus(kotlin.sequences.Sequence<T>) on Collection<T>
  plus(T) on Collection<T>
  plusElement(T) on Collection<T>
  size: Int
  spliterator(): Spliterator<E>
  toBooleanArray() on Collection<Boolean>
  toByteArray() on Collection<Byte>
  toCharArray() on Collection<Char>
  toDoubleArray() on Collection<Double>
  toFloatArray() on Collection<Float>
  toIntArray() on Collection<Int>
  toLongArray() on Collection<Long>
  toMutableList() on Collection<T>
  toShortArray() on Collection<Short>
  toString(): String
  toTypedArray() on Collection<T>
 -Iterable
  all((T) -> kotlin.Boolean) on Iterable<T>
  any((T) -> kotlin.Boolean) on Iterable<T>
  any() on Iterable<T>
  asIterable() on Iterable<T>
  asSequence() on Iterable<T>
  associate((T) -> kotlin.Pair<K, V>) on Iterable<T>
  associateBy((T) -> K) on Iterable<T>
  associateBy((T) -> K, (T) -> V) on Iterable<T>
  associateByTo(M, (T) -> K) on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V) on Iterable<T>
  associateTo(M, (T) -> kotlin.Pair<K, V>) on Iterable<T>
  average() on Iterable<Byte>
  average() on Iterable<Double>
  average() on Iterable<Float>
  average() on Iterable<Int>
  average() on Iterable<Long>
  average() on Iterable<Short>
  collectionSizeOrDefault(kotlin.Int) on Iterable<T>
  collectionSizeOrNull() on Iterable<T>
  contains(T) on Iterable<T>
  convertToSetForSetOperation() on Iterable<T>
  convertToSetForSetOperationWith(kotlin.collections.Iterable<T>) on Iterable<T>
  count((T) -> kotlin.Boolean) on Iterable<T>
  count() on Iterable<T>
  distinct() on Iterable<T>
  distinctBy((T) -> K) on Iterable<T>
  drop(kotlin.Int) on Iterable<T>
  dropWhile((T) -> kotlin.Boolean) on Iterable<T>
  elementAt(kotlin.Int) on Iterable<T>
  elementAtOrElse(kotlin.Int, (kotlin.Int) -> T) on Iterable<T>
  elementAtOrNull(kotlin.Int) on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> kotlin.Boolean) on Iterable<T>
  filterIndexed((kotlin.Int, T) -> kotlin.Boolean) on Iterable<T>
  filterIndexedTo(C, (kotlin.Int, T) -> kotlin.Boolean) on Iterable<T>
  filterIsInstance() on Iterable<*>
  filterIsInstance(java.lang.Class<R>) on Iterable<*>
  filterIsInstanceTo(C) on Iterable<*>
  filterIsInstanceTo(C, java.lang.Class<R>) on Iterable<*>
  filterNot((T) -> kotlin.Boolean) on Iterable<T>
  filterNotNull() on Iterable<T?>
  filterNotNullTo(C) on Iterable<T?>
  filterNotTo(C, (T) -> kotlin.Boolean) on Iterable<T>
  filterTo(C, (T) -> kotlin.Boolean) on Iterable<T>
  find((T) -> kotlin.Boolean) on Iterable<T>
  findLast((T) -> kotlin.Boolean) on Iterable<T>
  first((T) -> kotlin.Boolean) on Iterable<T>
  first() on Iterable<T>
  firstOrNull((T) -> kotlin.Boolean) on Iterable<T>
  firstOrNull() on Iterable<T>
  flatMap((T) -> kotlin.collections.Iterable<R>) on Iterable<T>
  flatMapTo(C, (T) -> kotlin.collections.Iterable<R>) on Iterable<T>
  flatten() on Iterable<Iterable<T>>
  fold(R, (R, T) -> R) on Iterable<T>
  foldIndexed(R, (kotlin.Int, R, T) -> R) on Iterable<T>
  forEach((T) -> kotlin.Unit) on Iterable<T>
  forEachIndexed((kotlin.Int, T) -> kotlin.Unit) on Iterable<T>
  groupBy((T) -> K) on Iterable<T>
  groupBy((T) -> K, (T) -> V) on Iterable<T>
  groupByTo(M, (T) -> K) on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V) on Iterable<T>
  groupingBy((T) -> K) on Iterable<T>
  hashCode(): Int
  indexOf(T) on Iterable<T>
  indexOfFirst((T) -> kotlin.Boolean) on Iterable<T>
  indexOfLast((T) -> kotlin.Boolean) on Iterable<T>
  intersect(kotlin.collections.Iterable<T>) on Iterable<T>
  iterator(): Iterator<T>
  joinTo(A, kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, ((T) -> kotlin.CharSequence)?) on Iterable<T>
  joinToString(kotlin.CharSequence, kotlin.CharSequence, kotlin.CharSequence, kotlin.Int, kotlin.CharSequence, ((T) -> kotlin.CharSequence)?) on Iterable<T>
  last((T) -> kotlin.Boolean) on Iterable<T>
  last() on Iterable<T>
  lastIndexOf(T) on Iterable<T>
  lastOrNull((T) -> kotlin.Boolean) on Iterable<T>
  lastOrNull() on Iterable<T>
  map((T) -> R) on Iterable<T>
  mapIndexed((kotlin.Int, T) -> R) on Iterable<T>
  mapIndexedNotNull((kotlin.Int, T) -> R?) on Iterable<T>
  mapIndexedNotNullTo(C, (kotlin.Int, T) -> R?) on Iterable<T>
  mapIndexedTo(C, (kotlin.Int, T) -> R) on Iterable<T>
  mapNotNull((T) -> R?) on Iterable<T>
  mapNotNullTo(C, (T) -> R?) on Iterable<T>
  mapTo(C, (T) -> R) on Iterable<T>
  max() on Iterable<Double>
  max() on Iterable<Float>
  max() on Iterable<T>
  maxBy((T) -> R) on Iterable<T>
  maxWith(kotlin.Comparator<in T>) on Iterable<T>
  min() on Iterable<Double>
  min() on Iterable<Float>
  min() on Iterable<T>
  minBy((T) -> R) on Iterable<T>
  minus(kotlin.Array<out T>) on Iterable<T>
  minus(kotlin.collections.Iterable<T>) on Iterable<T>
  minus(kotlin.sequences.Sequence<T>) on Iterable<T>
  minus(T) on Iterable<T>
  minusElement(T) on Iterable<T>
  minWith(kotlin.Comparator<in T>) on Iterable<T>
  none((T) -> kotlin.Boolean) on Iterable<T>
  none() on Iterable<T>
  onEach((T) -> kotlin.Unit) on C
  partition((T) -> kotlin.Boolean) on Iterable<T>
  plus(kotlin.Array<out T>) on Iterable<T>
  plus(kotlin.collections.Iterable<T>) on Iterable<T>
  plus(kotlin.sequences.Sequence<T>) on Iterable<T>
  plus(T) on Iterable<T>
  plusElement(T) on Iterable<T>
  reduce((S, T) -> S) on Iterable<T>
  reduceIndexed((kotlin.Int, S, T) -> S) on Iterable<T>
  requireNoNulls() on Iterable<T?>
  reversed() on Iterable<T>
  single((T) -> kotlin.Boolean) on Iterable<T>
  single() on Iterable<T>
  singleOrNull((T) -> kotlin.Boolean) on Iterable<T>
  singleOrNull() on Iterable<T>
  sorted() on Iterable<T>
  sortedBy((T) -> R?) on Iterable<T>
  sortedByDescending((T) -> R?) on Iterable<T>
  sortedDescending() on Iterable<T>
  sortedWith(kotlin.Comparator<in T>) on Iterable<T>
  subtract(kotlin.collections.Iterable<T>) on Iterable<T>
  sum() on Iterable<Byte>
  sum() on Iterable<Double>
  sum() on Iterable<Float>
  sum() on Iterable<Int>
  sum() on Iterable<Long>
  sum() on Iterable<Short>
  sumBy((T) -> kotlin.Int) on Iterable<T>
  sumByDouble((T) -> kotlin.Double) on Iterable<T>
  take(kotlin.Int) on Iterable<T>
  takeWhile((T) -> kotlin.Boolean) on Iterable<T>
  toCollection(C) on Iterable<T>
  toHashSet() on Iterable<T>
  toList() on Iterable<T>
  toMap() on Iterable<Pair<K, V>>
  toMap(M) on Iterable<Pair<K, V>>
  toMutableList() on Iterable<T>
  toMutableSet() on Iterable<T>
  toSet() on Iterable<T>
  toSortedSet() on Iterable<T>
  toSortedSet(kotlin.Comparator<in T>) on Iterable<T>
  toString(): String
  union(kotlin.collections.Iterable<T>) on Iterable<T>
  unzip() on Iterable<Pair<T, R>>
  withIndex() on Iterable<T>
  zip(kotlin.Array<out R>) on Iterable<T>
  zip(kotlin.Array<out R>, (T, R) -> V) on Iterable<T>
  zip(kotlin.collections.Iterable<R>) on Iterable<T>
  zip(kotlin.collections.Iterable<R>, (T, R) -> V) on Iterable<T>
 -List
  asReversed() on List<T>
  binarySearch(kotlin.Int, kotlin.Int, (T) -> kotlin.Int) on List<T>
  binarySearch(T, kotlin.Comparator<in T>, kotlin.Int, kotlin.Int) on List<T>
  binarySearch(T?, kotlin.Int, kotlin.Int) on List<T?>
  binarySearchBy(K?, kotlin.Int, kotlin.Int, (T) -> K?) on List<T>
  component1() on List<T>
  component2() on List<T>
  component3() on List<T>
  component4() on List<T>
  component5() on List<T>
  contains(E): Boolean
  containsAll(Collection<E>): Boolean
  dropLast(kotlin.Int) on List<T>
  dropLastWhile((T) -> kotlin.Boolean) on List<T>
  elementAt(kotlin.Int) on List<T>
  elementAtOrElse(kotlin.Int, (kotlin.Int) -> T) on List<T>
  elementAtOrNull(kotlin.Int) on List<T>
  equals(Any?): Boolean
  findLast((T) -> kotlin.Boolean) on List<T>
  first() on List<T>
  firstOrNull() on List<T>
  foldRight(R, (T, R) -> R) on List<T>
  foldRightIndexed(R, (kotlin.Int, T, R) -> R) on List<T>
  forEach(Consumer<in E!>!): Unit
  get(Int): E
  getOrElse(kotlin.Int, (kotlin.Int) -> T) on List<T>
  getOrNull(kotlin.Int) on List<T>
  hashCode(): Int
  indexOf(E): Int
  indexOf(T) on List<T>
  indexOfFirst((T) -> kotlin.Boolean) on List<T>
  indexOfLast((T) -> kotlin.Boolean) on List<T>
  isEmpty(): Boolean
  iterator(): Iterator<E>
  last((T) -> kotlin.Boolean) on List<T>
  last() on List<T>
  lastIndex on List<T>
  lastIndexOf(E): Int
  lastIndexOf(T) on List<T>
  lastOrNull((T) -> kotlin.Boolean) on List<T>
  lastOrNull() on List<T>
  listIterator(): ListIterator<E>
  listIterator(Int): ListIterator<E>
  optimizeReadOnlyList() on List<T>
  orEmpty() on List<T>?
  parallelStream(): Stream<E>
  reduceRight((T, S) -> S) on List<T>
  reduceRightIndexed((kotlin.Int, T, S) -> S) on List<T>
  requireNoNulls() on List<T?>
  single() on List<T>
  singleOrNull() on List<T>
  size: Int
  slice(kotlin.collections.Iterable<kotlin.Int>) on List<T>
  slice(kotlin.ranges.IntRange) on List<T>
  spliterator(): Spliterator<E!>
  stream(): Stream<E>
  subList(Int, Int): List<E>
  takeLast(kotlin.Int) on List<T>
  takeLastWhile((T) -> kotlin.Boolean) on List<T>
  toString(): String
 -Map
  all((kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  any((kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  any() on Map<out K, V>
  asIterable() on Map<out K, V>
  asSequence() on Map<out K, V>
  contains(K) on Map<out K, V>
  containsKey(K) on Map<out K, *>
  containsKey(K): Boolean
  containsValue(V) on Map<K, V>
  containsValue(V): Boolean
  count((kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  count() on Map<out K, V>
  entries: Set<Map.Entry<K, V>>
  -Entry
   component1() on Map.Entry<K, V>
   component2() on Map.Entry<K, V>
   equals(Any?): Boolean
   hashCode(): Int
   key: K
   toPair() on Map.Entry<K, V>
   toString(): String
   value: V
  equals(Any?): Boolean
  filter((kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  filterKeys((K) -> kotlin.Boolean) on Map<out K, V>
  filterNot((kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  filterNotTo(M, (kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  filterTo(M, (kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  filterValues((V) -> kotlin.Boolean) on Map<out K, V>
  flatMap((kotlin.collections.Map.Entry<K, V>) -> kotlin.collections.Iterable<R>) on Map<out K, V>
  flatMapTo(C, (kotlin.collections.Map.Entry<K, V>) -> kotlin.collections.Iterable<R>) on Map<out K, V>
  forEach((kotlin.collections.Map.Entry<K, V>) -> kotlin.Unit) on Map<out K, V>
  get(K) on Map<out K, V>
  get(K): V?
  getOrDefault(K, V) on Map<out K, V>
  getOrDefault(K, V): V
  getOrElse(K, () -> V) on Map<K, V>
  getOrElseNullable(K, () -> V) on Map<K, V>
  getOrImplicitDefault(K) on Map<K, V>
  getValue(K) on Map<K, V>
  getValue(kotlin.Any?, kotlin.reflect.KProperty<*>) on Map<in String, V>
  hashCode(): Int
  isEmpty(): Boolean
  isNotEmpty() on Map<out K, V>
  iterator() on Map<out K, V>
  keys: Set<K>
  map((kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  mapKeys((kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  mapKeysTo(M, (kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  mapNotNull((kotlin.collections.Map.Entry<K, V>) -> R?) on Map<out K, V>
  mapNotNullTo(C, (kotlin.collections.Map.Entry<K, V>) -> R?) on Map<out K, V>
  mapTo(C, (kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  mapValues((kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  mapValuesTo(M, (kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  maxBy((kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  maxWith(kotlin.Comparator<in kotlin.collections.Map.Entry<K, V>>) on Map<out K, V>
  minBy((kotlin.collections.Map.Entry<K, V>) -> R) on Map<out K, V>
  minus(K) on Map<out K, V>
  minus(kotlin.Array<out K>) on Map<out K, V>
  minus(kotlin.collections.Iterable<K>) on Map<out K, V>
  minus(kotlin.sequences.Sequence<K>) on Map<out K, V>
  minWith(kotlin.Comparator<in kotlin.collections.Map.Entry<K, V>>) on Map<out K, V>
  none((kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean) on Map<out K, V>
  none() on Map<out K, V>
  onEach((kotlin.collections.Map.Entry<K, V>) -> kotlin.Unit) on M
  optimizeReadOnlyMap() on Map<K, V>
  orEmpty() on Map<K, V>?
  plus(kotlin.Array<out kotlin.Pair<K, V>>) on Map<out K, V>
  plus(kotlin.collections.Iterable<kotlin.Pair<K, V>>) on Map<out K, V>
  plus(kotlin.collections.Map<out K, V>) on Map<out K, V>
  plus(kotlin.Pair<K, V>) on Map<out K, V>
  plus(kotlin.sequences.Sequence<kotlin.Pair<K, V>>) on Map<out K, V>
  size: Int
  toList() on Map<out K, V>
  toMap() on Map<out K, V>
  toMap(M) on Map<out K, V>
  toMutableMap() on Map<out K, V>
  toProperties() on Map<String, String>
  toSingletonMap() on Map<out K, V>
  toSingletonMapOrSelf() on Map<K, V>
  toSortedMap() on Map<out K, V>
  toSortedMap(java.util.Comparator<in K>) on Map<out K, V>
  toString(): String
  values: Collection<V>
  withDefault((K) -> V) on Map<K, V>
 -MutableCollection
  add(E): Boolean
  addAll(Collection<E>): Boolean
  addAll(kotlin.Array<out T>) on MutableCollection<in T>
  addAll(kotlin.collections.Iterable<T>) on MutableCollection<in T>
  addAll(kotlin.sequences.Sequence<T>) on MutableCollection<in T>
  clear(): Unit
  contains(E): Boolean
  containsAll(Collection<E>): Boolean
  equals(Any?): Boolean
  forEach(Consumer<in E!>!): Unit
  hashCode(): Int
  isEmpty(): Boolean
  iterator(): MutableIterator<E>
  minusAssign(kotlin.Array<T>) on MutableCollection<in T>
  minusAssign(kotlin.collections.Iterable<T>) on MutableCollection<in T>
  minusAssign(kotlin.sequences.Sequence<T>) on MutableCollection<in T>
  minusAssign(T) on MutableCollection<in T>
  parallelStream(): Stream<E>
  plusAssign(kotlin.Array<T>) on MutableCollection<in T>
  plusAssign(kotlin.collections.Iterable<T>) on MutableCollection<in T>
  plusAssign(kotlin.sequences.Sequence<T>) on MutableCollection<in T>
  plusAssign(T) on MutableCollection<in T>
  remove(E): Boolean
  remove(T) on MutableCollection<out T>
  removeAll(Collection<E>): Boolean
  removeAll(kotlin.Array<out T>) on MutableCollection<in T>
  removeAll(kotlin.collections.Collection<T>) on MutableCollection<out T>
  removeAll(kotlin.collections.Iterable<T>) on MutableCollection<in T>
  removeAll(kotlin.sequences.Sequence<T>) on MutableCollection<in T>
  retainAll(Collection<E>): Boolean
  retainAll(kotlin.Array<out T>) on MutableCollection<in T>
  retainAll(kotlin.collections.Collection<T>) on MutableCollection<out T>
  retainAll(kotlin.collections.Iterable<T>) on MutableCollection<in T>
  retainAll(kotlin.sequences.Sequence<T>) on MutableCollection<in T>
  size: Int
  spliterator(): Spliterator<E!>
  stream(): Stream<E>
  toString(): String
 -MutableIterable
  equals(Any?): Boolean
  forEach(Consumer<in T!>!): Unit
  hashCode(): Int
  iterator(): MutableIterator<T>
  removeAll((T) -> kotlin.Boolean) on MutableIterable<T>
  retainAll((T) -> kotlin.Boolean) on MutableIterable<T>
  spliterator(): Spliterator<T>
  toString(): String
 -MutableList
  add(E): Boolean
  add(Int, E): Unit
  addAll(Collection<E>): Boolean
  addAll(Int, Collection<E>): Boolean
  asReversed() on MutableList<T>
  clear(): Unit
  contains(E): Boolean
  containsAll(Collection<E>): Boolean
  equals(Any?): Boolean
  forEach(Consumer<in E!>!): Unit
  get(Int): E
  hashCode(): Int
  indexOf(E): Int
  isEmpty(): Boolean
  iterator(): Iterator<E>
  lastIndexOf(E): Int
  listIterator(): MutableListIterator<E>
  listIterator(Int): MutableListIterator<E>
  parallelStream(): Stream<E>
  remove(E): Boolean
  remove(kotlin.Int) on MutableList<T>
  removeAll((T) -> kotlin.Boolean) on MutableList<T>
  removeAll(Collection<E>): Boolean
  removeAt(Int): E
  removeIf(Predicate<in E>): Boolean
  retainAll((T) -> kotlin.Boolean) on MutableList<T>
  retainAll(Collection<E>): Boolean
  reverse() on MutableList<T>
  set(Int, E): E
  size: Int
  sort((T, T) -> kotlin.Int) on MutableList<T>
  sort(kotlin.Comparator<in T>) on MutableList<T>
  sortBy((T) -> R?) on MutableList<T>
  sortByDescending((T) -> R?) on MutableList<T>
  sortWith(kotlin.Comparator<in T>) on MutableList<T>
  spliterator(): Spliterator<E!>
  stream(): Stream<E>
  subList(Int, Int): MutableList<E>
  toString(): String
 -MutableMap
  clear(): Unit
  containsKey(K): Boolean
  containsValue(V): Boolean
  entries: MutableSet<MutableMap.MutableEntry<K, V>>
  equals(Any?): Boolean
  forEach(BiConsumer<in K, in V>): Unit
  get(K): V?
  getOrDefault(K, V): V
  getOrPut(K, () -> V) on MutableMap<K, V>
  getValue(kotlin.Any?, kotlin.reflect.KProperty<*>) on MutableMap<in String, in V>
  hashCode(): Int
  isEmpty(): Boolean
  iterator() on MutableMap<K, V>
  keys: MutableSet<K>
  mapValuesInPlace((kotlin.collections.Map.Entry<K, V>) -> R) on MutableMap<K, V>
  minusAssign(K) on MutableMap<K, V>
  minusAssign(kotlin.Array<out K>) on MutableMap<K, V>
  minusAssign(kotlin.collections.Iterable<K>) on MutableMap<K, V>
  minusAssign(kotlin.sequences.Sequence<K>) on MutableMap<K, V>
  -MutableEntry
   equals(Any?): Boolean
   hashCode(): Int
   key: K
   setValue(V): V
   toString(): String
   value: V
  plusAssign(kotlin.Array<out kotlin.Pair<K, V>>) on MutableMap<in K, in V>
  plusAssign(kotlin.collections.Iterable<kotlin.Pair<K, V>>) on MutableMap<in K, in V>
  plusAssign(kotlin.collections.Map<K, V>) on MutableMap<in K, in V>
  plusAssign(kotlin.Pair<K, V>) on MutableMap<in K, in V>
  plusAssign(kotlin.sequences.Sequence<kotlin.Pair<K, V>>) on MutableMap<in K, in V>
  put(K, V): V?
  putAll(kotlin.Array<out kotlin.Pair<K, V>>) on MutableMap<in K, in V>
  putAll(kotlin.collections.Iterable<kotlin.Pair<K, V>>) on MutableMap<in K, in V>
  putAll(kotlin.sequences.Sequence<kotlin.Pair<K, V>>) on MutableMap<in K, in V>
  putAll(Map<out K, V>): Unit
  remove(K) on MutableMap<out K, V>
  remove(K): V?
  remove(K, V) on MutableMap<out K, out V>
  remove(K, V): Boolean
  set(K, V) on MutableMap<K, V>
  setValue(kotlin.Any?, kotlin.reflect.KProperty<*>, V) on MutableMap<in String, in V>
  size: Int
  toString(): String
  values: MutableCollection<V>
  withDefault((K) -> V) on MutableMap<K, V>
 -MutableSet
  add(E): Boolean
  addAll(Collection<E>): Boolean
  clear(): Unit
  contains(E): Boolean
  containsAll(Collection<E>): Boolean
  equals(Any?): Boolean
  forEach(Consumer<in E!>!): Unit
  hashCode(): Int
  isEmpty(): Boolean
  iterator(): MutableIterator<E>
  parallelStream(): Stream<E>
  remove(E): Boolean
  removeAll(Collection<E>): Boolean
  removeIf(Predicate<in E>): Boolean
  retainAll(Collection<E>): Boolean
  size: Int
  spliterator(): Spliterator<E!>
  stream(): Stream<E>
  toString(): String
 -Set
  contains(E): Boolean
  containsAll(Collection<E>): Boolean
  equals(Any?): Boolean
  forEach(Consumer<in E!>!): Unit
  hashCode(): Int
  isEmpty(): Boolean
  iterator(): Iterator<E>
  minus(kotlin.Array<out T>) on Set<T>
  minus(kotlin.collections.Iterable<T>) on Set<T>
  minus(kotlin.sequences.Sequence<T>) on Set<T>
  minus(T) on Set<T>
  minusElement(T) on Set<T>
  optimizeReadOnlySet() on Set<T>
  orEmpty() on Set<T>?
  parallelStream(): Stream<E>
  plus(kotlin.Array<out T>) on Set<T>
  plus(kotlin.collections.Iterable<T>) on Set<T>
  plus(kotlin.sequences.Sequence<T>) on Set<T>
  plus(T) on Set<T>
  plusElement(T) on Set<T>
  size: Int
  spliterator(): Spliterator<E!>
  stream(): Stream<E>
  toString(): String
