-Turtles.java
 -All
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  methodOnAll(): void
  methodOnNinja(): void
  methodOnTurtles(): void
  notify(): void
  notifyAll(): void
  toString(): String
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnTurtles: int
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  onTurtles() on Turtles
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -Down
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  methodOnAll(): void
  methodOnDown(): void
  methodOnNinja(): void
  methodOnPower(): void
  methodOnThe(): void
  methodOnTurtles(): void
  methodOnWay(): void
  notify(): void
  notifyAll(): void
  toString(): String
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnDown: int
  fieldOnThe: int
  fieldOnTurtles: int
  fieldOnWay: int
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onDown() on Down
  onNinja() on Ninja
  onPower() on Power
  onThe() on The
  onTurtles() on Turtles
  onWay() on Way
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -Ninja
  methodOnNinja(): void
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -Power
  methodOnPower(): void
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onPower() on Power
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -The
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  methodOnAll(): void
  methodOnNinja(): void
  methodOnPower(): void
  methodOnThe(): void
  methodOnTurtles(): void
  notify(): void
  notifyAll(): void
  toString(): String
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnThe: int
  fieldOnTurtles: int
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  onPower() on Power
  onThe() on The
  onTurtles() on Turtles
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -Turtles
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  methodOnTurtles(): void
  notify(): void
  notifyAll(): void
  toString(): String
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnTurtles: int
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onTurtles() on Turtles
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -Way
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  methodOnAll(): void
  methodOnNinja(): void
  methodOnPower(): void
  methodOnThe(): void
  methodOnTurtles(): void
  methodOnWay(): void
  notify(): void
  notifyAll(): void
  toString(): String
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnThe: int
  fieldOnTurtles: int
  fieldOnWay: int
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  onPower() on Power
  onThe() on The
  onTurtles() on Turtles
  onWay() on Way
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
