-Collections.kt
 -Collection
  aaa() on Collection<Any>
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  contains(E): Boolean
  contains(T): Boolean on Iterable<T>
  containsAll(Collection<E>): Boolean
  containsAll(Collection<T>): Boolean on Collection<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Collection<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrNull(Int): T? on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in E!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(T): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  indices: IntRange on Collection<*>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  isEmpty(): Boolean
  isNotEmpty(): Boolean on Collection<T>
  iterator(): Iterator<E>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last(): T on Iterable<T>
  lastIndexOf(T): Int on Iterable<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull(): T? on Iterable<T>
  let((T) -> R): R on <T>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(T): List<T> on Iterable<T>
  minusElement(T): List<T> on Iterable<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  orEmpty(): Collection<T> on Collection<T>?
  parallelStream(): Stream<E>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Collection<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Iterable<T>): List<T> on Collection<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Sequence<T>): List<T> on Collection<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(T): List<T> on Collection<T>
  plus(T): List<T> on Iterable<T>
  plusElement(T): List<T> on Collection<T>
  plusElement(T): List<T> on Iterable<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  requireNoNulls(): Iterable<T> on Iterable<T?>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  size: Int
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  spliterator(): Spliterator<E?>
  stream(): Stream<E>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toBooleanArray(): BooleanArray on Collection<Boolean>
  toByteArray(): ByteArray on Collection<Byte>
  toCharArray(): CharArray on Collection<Char>
  toCollection(C): C on Iterable<T>
  toDoubleArray(): DoubleArray on Collection<Double>
  toFloatArray(): FloatArray on Collection<Float>
  toHashSet(): HashSet<T> on Iterable<T>
  toIntArray(): IntArray on Collection<Int>
  toList(): List<T> on Iterable<T>
  toLongArray(): LongArray on Collection<Long>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Collection<T>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toShortArray(): ShortArray on Collection<Short>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  toTypedArray(): Array<T> on Collection<T>
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 Collection<Any>.aaa(): Unit
 -Iterable
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  contains(T): Boolean on Iterable<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrNull(Int): T? on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in T!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(T): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  iterator(): Iterator<T>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last(): T on Iterable<T>
  lastIndexOf(T): Int on Iterable<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull(): T? on Iterable<T>
  let((T) -> R): R on <T>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(T): List<T> on Iterable<T>
  minusElement(T): List<T> on Iterable<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(T): List<T> on Iterable<T>
  plusElement(T): List<T> on Iterable<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  requireNoNulls(): Iterable<T> on Iterable<T?>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  spliterator(): Spliterator<T>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toCollection(C): C on Iterable<T>
  toHashSet(): HashSet<T> on Iterable<T>
  toList(): List<T> on Iterable<T>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 -List
  aaa() on Collection<Any>
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asReversed(): List<T> on List<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  binarySearch(Int, Int, (T) -> Int): Int on List<T>
  binarySearch(T, Comparator<in T>, Int, Int): Int on List<T>
  binarySearch(T?, Int, Int): Int on List<T?>
  binarySearchBy(K?, Int, Int, (T) -> K?): Int on List<T>
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  component1(): T on List<T>
  component2(): T on List<T>
  component3(): T on List<T>
  component4(): T on List<T>
  component5(): T on List<T>
  contains(E): Boolean
  contains(T): Boolean on Iterable<T>
  containsAll(Collection<E>): Boolean
  containsAll(Collection<T>): Boolean on Collection<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Collection<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropLast(Int): List<T> on List<T>
  dropLastWhile((T) -> Boolean): List<T> on List<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAt(Int): T on List<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on List<T>
  elementAtOrNull(Int): T? on Iterable<T>
  elementAtOrNull(Int): T? on List<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on List<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  first(): T on List<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  firstOrNull(): T? on List<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  foldRight(R, (T, R) -> R): R on List<T>
  foldRightIndexed(R, (Int, T, R) -> R): R on List<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in E!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  get(Int): E
  getOrElse(Int, (Int) -> T): T on List<T>
  getOrNull(Int): T? on List<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(E): Int
  indexOf(T): Int on Iterable<T>
  indexOf(T): Int on List<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on List<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on List<T>
  indices: IntRange on Collection<*>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  isEmpty(): Boolean
  isNotEmpty(): Boolean on Collection<T>
  iterator(): Iterator<E>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last((T) -> Boolean): T on List<T>
  last(): T on Iterable<T>
  last(): T on List<T>
  lastIndex: Int on List<T>
  lastIndexOf(E): Int
  lastIndexOf(T): Int on Iterable<T>
  lastIndexOf(T): Int on List<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull((T) -> Boolean): T? on List<T>
  lastOrNull(): T? on Iterable<T>
  lastOrNull(): T? on List<T>
  let((T) -> R): R on <T>
  listIterator(): ListIterator<E>
  listIterator(Int): ListIterator<E>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(T): List<T> on Iterable<T>
  minusElement(T): List<T> on Iterable<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  optimizeReadOnlyList(): List<T> on List<T>
  orEmpty(): Collection<T> on Collection<T>?
  orEmpty(): List<T> on List<T>?
  parallelStream(): Stream<E>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Collection<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Iterable<T>): List<T> on Collection<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Sequence<T>): List<T> on Collection<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(T): List<T> on Collection<T>
  plus(T): List<T> on Iterable<T>
  plusElement(T): List<T> on Collection<T>
  plusElement(T): List<T> on Iterable<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  reduceRight((T, S) -> S): S on List<T>
  reduceRightIndexed((Int, T, S) -> S): S on List<T>
  requireNoNulls(): Iterable<T> on Iterable<T?>
  requireNoNulls(): List<T> on List<T?>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  single(): T on List<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  singleOrNull(): T? on List<T>
  size: Int
  slice(IntRange): List<T> on List<T>
  slice(Iterable<Int>): List<T> on List<T>
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  spliterator(): Spliterator<E?>
  stream(): Stream<E>
  subList(Int, Int): List<E>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeLast(Int): List<T> on List<T>
  takeLastWhile((T) -> Boolean): List<T> on List<T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toBooleanArray(): BooleanArray on Collection<Boolean>
  toByteArray(): ByteArray on Collection<Byte>
  toCharArray(): CharArray on Collection<Char>
  toCollection(C): C on Iterable<T>
  toDoubleArray(): DoubleArray on Collection<Double>
  toFloatArray(): FloatArray on Collection<Float>
  toHashSet(): HashSet<T> on Iterable<T>
  toIntArray(): IntArray on Collection<Int>
  toList(): List<T> on Iterable<T>
  toLongArray(): LongArray on Collection<Long>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Collection<T>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toShortArray(): ShortArray on Collection<Short>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  toTypedArray(): Array<T> on Collection<T>
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 -Map
  all((Entry<K, V>) -> Boolean): Boolean on Map<out K, V>
  also((T) -> Unit): T on <T>
  any((Entry<K, V>) -> Boolean): Boolean on Map<out K, V>
  any(): Boolean on Map<out K, V>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<Entry<K, V>> on Map<out K, V>
  asSequence(): Sequence<Entry<K, V>> on Map<out K, V>
  contains(K): Boolean on Map<out K, V>
  containsKey(K): Boolean
  containsKey(K): Boolean on Map<out K, *>
  containsValue(V): Boolean
  containsValue(V): Boolean on Map<K, V>
  count((Entry<K, V>) -> Boolean): Int on Map<out K, V>
  count(): Int on Map<out K, V>
  entries: Set<Map.Entry<K, V>>
  -Entry
   also((T) -> Unit): T on <T>
   apply(T() -> Unit): T on <T>
   component1(): K on Entry<K, V>
   component2(): V on Entry<K, V>
   equals(Any?): Boolean
   hashCode(): Int
   javaClass: Class<T> on <T>
   key: K
   let((T) -> R): R on <T>
   onAny() on Any
   onAnyFromLibrary(): Unit on Any
   onAnyFromLibraryInternal(): Unit on Any
   onAnyNullable() on Any?
   run(T() -> R): R on <T>
   takeIf((T) -> Boolean): T? on <T>
   takeUnless((T) -> Boolean): T? on <T>
   to(B): Pair<A, B> on <A>
   toPair(): Pair<K, V> on Entry<K, V>
   toString(): String
   toString(): String on Any?
   toString(): String on Any?
   value: V
  equals(Any?): Boolean
  filter((Entry<K, V>) -> Boolean): Map<K, V> on Map<out K, V>
  filterKeys((K) -> Boolean): Map<K, V> on Map<out K, V>
  filterNot((Entry<K, V>) -> Boolean): Map<K, V> on Map<out K, V>
  filterNotTo(M, (Entry<K, V>) -> Boolean): M on Map<out K, V>
  filterTo(M, (Entry<K, V>) -> Boolean): M on Map<out K, V>
  filterValues((V) -> Boolean): Map<K, V> on Map<out K, V>
  flatMap((Entry<K, V>) -> Iterable<R>): List<R> on Map<out K, V>
  flatMapTo(C, (Entry<K, V>) -> Iterable<R>): C on Map<out K, V>
  forEach((Entry<K, V>) -> Unit): Unit on Map<out K, V>
  forEach(BiConsumer<in K, in V>): Unit
  get(K): V?
  get(K): V? on Map<out K, V>
  getOrDefault(K, V): V
  getOrDefault(K, V): V on Map<out K, V>
  getOrElse(K, () -> V): V on Map<K, V>
  getOrElseNullable(K, () -> V): V on Map<K, V>
  getOrImplicitDefault(K): V on Map<K, V>
  getValue(Any?, KProperty<*>): V1 on Map<in String, V>
  getValue(K): V on Map<K, V>
  hashCode(): Int
  isEmpty(): Boolean
  isNotEmpty(): Boolean on Map<out K, V>
  iterator(): Iterator<Entry<K, V>> on Map<out K, V>
  javaClass: Class<T> on <T>
  keys: Set<K>
  let((T) -> R): R on <T>
  map((Entry<K, V>) -> R): List<R> on Map<out K, V>
  mapKeys((Entry<K, V>) -> R): Map<R, V> on Map<out K, V>
  mapKeysTo(M, (Entry<K, V>) -> R): M on Map<out K, V>
  mapNotNull((Entry<K, V>) -> R?): List<R> on Map<out K, V>
  mapNotNullTo(C, (Entry<K, V>) -> R?): C on Map<out K, V>
  mapTo(C, (Entry<K, V>) -> R): C on Map<out K, V>
  mapValues((Entry<K, V>) -> R): Map<K, R> on Map<out K, V>
  mapValuesTo(M, (Entry<K, V>) -> R): M on Map<out K, V>
  maxBy((Entry<K, V>) -> R): Entry<K, V>? on Map<out K, V>
  maxWith(Comparator<in Entry<K, V>>): Entry<K, V>? on Map<out K, V>
  minBy((Entry<K, V>) -> R): Entry<K, V>? on Map<out K, V>
  minus(Array<out K>): Map<K, V> on Map<out K, V>
  minus(Iterable<K>): Map<K, V> on Map<out K, V>
  minus(K): Map<K, V> on Map<out K, V>
  minus(Sequence<K>): Map<K, V> on Map<out K, V>
  minWith(Comparator<in Entry<K, V>>): Entry<K, V>? on Map<out K, V>
  none((Entry<K, V>) -> Boolean): Boolean on Map<out K, V>
  none(): Boolean on Map<out K, V>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((Entry<K, V>) -> Unit): M on <M>
  optimizeReadOnlyMap(): Map<K, V> on Map<K, V>
  orEmpty(): Map<K, V> on Map<K, V>?
  plus(Array<out Pair<K, V>>): Map<K, V> on Map<out K, V>
  plus(Iterable<Pair<K, V>>): Map<K, V> on Map<out K, V>
  plus(Map<out K, V>): Map<K, V> on Map<out K, V>
  plus(Pair<K, V>): Map<K, V> on Map<out K, V>
  plus(Sequence<Pair<K, V>>): Map<K, V> on Map<out K, V>
  run(T() -> R): R on <T>
  size: Int
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  to(B): Pair<A, B> on <A>
  toList(): List<Pair<K, V>> on Map<out K, V>
  toMap(): Map<K, V> on Map<out K, V>
  toMap(M): M on Map<out K, V>
  toMutableMap(): MutableMap<K, V> on Map<out K, V>
  toProperties(): Properties on Map<String, String>
  toSingletonMap(): Map<K, V> on Map<out K, V>
  toSingletonMapOrSelf(): Map<K, V> on Map<K, V>
  toSortedMap(): SortedMap<K, V> on Map<out K, V>
  toSortedMap(Comparator<in K>): SortedMap<K, V> on Map<out K, V>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  values: Collection<V>
  withDefault((K) -> V): Map<K, V> on Map<K, V>
 -MutableCollection
  aaa() on Collection<Any>
  add(E): Boolean
  addAll(Array<out T>): Boolean on MutableCollection<in T>
  addAll(Collection<E>): Boolean
  addAll(Iterable<T>): Boolean on MutableCollection<in T>
  addAll(Sequence<T>): Boolean on MutableCollection<in T>
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  clear(): Unit
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  contains(E): Boolean
  contains(T): Boolean on Iterable<T>
  containsAll(Collection<E>): Boolean
  containsAll(Collection<T>): Boolean on Collection<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Collection<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrNull(Int): T? on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in E!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(T): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  indices: IntRange on Collection<*>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  isEmpty(): Boolean
  isNotEmpty(): Boolean on Collection<T>
  iterator(): MutableIterator<E>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last(): T on Iterable<T>
  lastIndexOf(T): Int on Iterable<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull(): T? on Iterable<T>
  let((T) -> R): R on <T>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(T): List<T> on Iterable<T>
  minusAssign(Array<T>): Unit on MutableCollection<in T>
  minusAssign(Iterable<T>): Unit on MutableCollection<in T>
  minusAssign(Sequence<T>): Unit on MutableCollection<in T>
  minusAssign(T): Unit on MutableCollection<in T>
  minusElement(T): List<T> on Iterable<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  orEmpty(): Collection<T> on Collection<T>?
  parallelStream(): Stream<E>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Collection<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Iterable<T>): List<T> on Collection<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Sequence<T>): List<T> on Collection<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(T): List<T> on Collection<T>
  plus(T): List<T> on Iterable<T>
  plusAssign(Array<T>): Unit on MutableCollection<in T>
  plusAssign(Iterable<T>): Unit on MutableCollection<in T>
  plusAssign(Sequence<T>): Unit on MutableCollection<in T>
  plusAssign(T): Unit on MutableCollection<in T>
  plusElement(T): List<T> on Collection<T>
  plusElement(T): List<T> on Iterable<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  remove(E): Boolean
  remove(T): Boolean on MutableCollection<out T>
  removeAll((T) -> Boolean): Boolean on MutableIterable<T>
  removeAll(Array<out T>): Boolean on MutableCollection<in T>
  removeAll(Collection<E>): Boolean
  removeAll(Collection<T>): Boolean on MutableCollection<out T>
  removeAll(Iterable<T>): Boolean on MutableCollection<in T>
  removeAll(Sequence<T>): Boolean on MutableCollection<in T>
  removeIf(Predicate<in E>): Boolean
  requireNoNulls(): Iterable<T> on Iterable<T?>
  retainAll((T) -> Boolean): Boolean on MutableIterable<T>
  retainAll(Array<out T>): Boolean on MutableCollection<in T>
  retainAll(Collection<E>): Boolean
  retainAll(Collection<T>): Boolean on MutableCollection<out T>
  retainAll(Iterable<T>): Boolean on MutableCollection<in T>
  retainAll(Sequence<T>): Boolean on MutableCollection<in T>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  size: Int
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  stream(): Stream<E>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toBooleanArray(): BooleanArray on Collection<Boolean>
  toByteArray(): ByteArray on Collection<Byte>
  toCharArray(): CharArray on Collection<Char>
  toCollection(C): C on Iterable<T>
  toDoubleArray(): DoubleArray on Collection<Double>
  toFloatArray(): FloatArray on Collection<Float>
  toHashSet(): HashSet<T> on Iterable<T>
  toIntArray(): IntArray on Collection<Int>
  toList(): List<T> on Iterable<T>
  toLongArray(): LongArray on Collection<Long>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Collection<T>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toShortArray(): ShortArray on Collection<Short>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  toTypedArray(): Array<T> on Collection<T>
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 -MutableIterable
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  contains(T): Boolean on Iterable<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrNull(Int): T? on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in T!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(T): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  iterator(): MutableIterator<T>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last(): T on Iterable<T>
  lastIndexOf(T): Int on Iterable<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull(): T? on Iterable<T>
  let((T) -> R): R on <T>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(T): List<T> on Iterable<T>
  minusElement(T): List<T> on Iterable<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(T): List<T> on Iterable<T>
  plusElement(T): List<T> on Iterable<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  removeAll((T) -> Boolean): Boolean on MutableIterable<T>
  requireNoNulls(): Iterable<T> on Iterable<T?>
  retainAll((T) -> Boolean): Boolean on MutableIterable<T>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  spliterator(): Spliterator<T>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toCollection(C): C on Iterable<T>
  toHashSet(): HashSet<T> on Iterable<T>
  toList(): List<T> on Iterable<T>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 -MutableList
  aaa() on Collection<Any>
  add(E): Boolean
  add(Int, E): Unit
  addAll(Array<out T>): Boolean on MutableCollection<in T>
  addAll(Collection<E>): Boolean
  addAll(Int, Collection<E>): Boolean
  addAll(Iterable<T>): Boolean on MutableCollection<in T>
  addAll(Sequence<T>): Boolean on MutableCollection<in T>
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asReversed(): List<T> on List<T>
  asReversed(): MutableList<T> on MutableList<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  binarySearch(Int, Int, (T) -> Int): Int on List<T>
  binarySearch(T, Comparator<in T>, Int, Int): Int on List<T>
  binarySearch(T?, Int, Int): Int on List<T?>
  binarySearchBy(K?, Int, Int, (T) -> K?): Int on List<T>
  clear(): Unit
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  component1(): T on List<T>
  component2(): T on List<T>
  component3(): T on List<T>
  component4(): T on List<T>
  component5(): T on List<T>
  contains(T): Boolean on Iterable<T>
  containsAll(Collection<T>): Boolean on Collection<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Collection<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropLast(Int): List<T> on List<T>
  dropLastWhile((T) -> Boolean): List<T> on List<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAt(Int): T on List<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on List<T>
  elementAtOrNull(Int): T? on Iterable<T>
  elementAtOrNull(Int): T? on List<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on List<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  first(): T on List<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  firstOrNull(): T? on List<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  foldRight(R, (T, R) -> R): R on List<T>
  foldRightIndexed(R, (Int, T, R) -> R): R on List<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in E!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  get(Int): E
  getOrElse(Int, (Int) -> T): T on List<T>
  getOrNull(Int): T? on List<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(E): Int
  indexOf(T): Int on Iterable<T>
  indexOf(T): Int on List<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on List<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on List<T>
  indices: IntRange on Collection<*>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  isNotEmpty(): Boolean on Collection<T>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last((T) -> Boolean): T on List<T>
  last(): T on Iterable<T>
  last(): T on List<T>
  lastIndex: Int on List<T>
  lastIndexOf(E): Int
  lastIndexOf(T): Int on Iterable<T>
  lastIndexOf(T): Int on List<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull((T) -> Boolean): T? on List<T>
  lastOrNull(): T? on Iterable<T>
  lastOrNull(): T? on List<T>
  let((T) -> R): R on <T>
  listIterator(): MutableListIterator<E>
  listIterator(Int): MutableListIterator<E>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(T): List<T> on Iterable<T>
  minusAssign(Array<T>): Unit on MutableCollection<in T>
  minusAssign(Iterable<T>): Unit on MutableCollection<in T>
  minusAssign(Sequence<T>): Unit on MutableCollection<in T>
  minusAssign(T): Unit on MutableCollection<in T>
  minusElement(T): List<T> on Iterable<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  optimizeReadOnlyList(): List<T> on List<T>
  orEmpty(): Collection<T> on Collection<T>?
  orEmpty(): List<T> on List<T>?
  parallelStream(): Stream<E>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Collection<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Iterable<T>): List<T> on Collection<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Sequence<T>): List<T> on Collection<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(T): List<T> on Collection<T>
  plus(T): List<T> on Iterable<T>
  plusAssign(Array<T>): Unit on MutableCollection<in T>
  plusAssign(Iterable<T>): Unit on MutableCollection<in T>
  plusAssign(Sequence<T>): Unit on MutableCollection<in T>
  plusAssign(T): Unit on MutableCollection<in T>
  plusElement(T): List<T> on Collection<T>
  plusElement(T): List<T> on Iterable<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  reduceRight((T, S) -> S): S on List<T>
  reduceRightIndexed((Int, T, S) -> S): S on List<T>
  remove(E): Boolean
  remove(Int): T on MutableList<T>
  remove(T): Boolean on MutableCollection<out T>
  removeAll((T) -> Boolean): Boolean on MutableIterable<T>
  removeAll((T) -> Boolean): Boolean on MutableList<T>
  removeAll(Array<out T>): Boolean on MutableCollection<in T>
  removeAll(Collection<E>): Boolean
  removeAll(Collection<T>): Boolean on MutableCollection<out T>
  removeAll(Iterable<T>): Boolean on MutableCollection<in T>
  removeAll(Sequence<T>): Boolean on MutableCollection<in T>
  removeAt(Int): E
  removeIf(Predicate<in E>): Boolean
  replaceAll(UnaryOperator<E>): Unit
  requireNoNulls(): Iterable<T> on Iterable<T?>
  requireNoNulls(): List<T> on List<T?>
  retainAll((T) -> Boolean): Boolean on MutableIterable<T>
  retainAll((T) -> Boolean): Boolean on MutableList<T>
  retainAll(Array<out T>): Boolean on MutableCollection<in T>
  retainAll(Collection<E>): Boolean
  retainAll(Collection<T>): Boolean on MutableCollection<out T>
  retainAll(Iterable<T>): Boolean on MutableCollection<in T>
  retainAll(Sequence<T>): Boolean on MutableCollection<in T>
  reverse(): Unit on MutableList<T>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  set(Int, E): E
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  single(): T on List<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  singleOrNull(): T? on List<T>
  slice(IntRange): List<T> on List<T>
  slice(Iterable<Int>): List<T> on List<T>
  sort((T, T) -> Int): Unit on MutableList<T>
  sort(): Unit on MutableList<T>
  sort(Comparator<in E!>!): Unit
  sort(Comparator<in T>): Unit on MutableList<T>
  sortBy((T) -> R?): Unit on MutableList<T>
  sortByDescending((T) -> R?): Unit on MutableList<T>
  sortDescending(): Unit on MutableList<T>
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  sortWith(Comparator<in T>): Unit on MutableList<T>
  stream(): Stream<E>
  subList(Int, Int): MutableList<E>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeLast(Int): List<T> on List<T>
  takeLastWhile((T) -> Boolean): List<T> on List<T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toBooleanArray(): BooleanArray on Collection<Boolean>
  toByteArray(): ByteArray on Collection<Byte>
  toCharArray(): CharArray on Collection<Char>
  toCollection(C): C on Iterable<T>
  toDoubleArray(): DoubleArray on Collection<Double>
  toFloatArray(): FloatArray on Collection<Float>
  toHashSet(): HashSet<T> on Iterable<T>
  toIntArray(): IntArray on Collection<Int>
  toList(): List<T> on Iterable<T>
  toLongArray(): LongArray on Collection<Long>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Collection<T>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toShortArray(): ShortArray on Collection<Short>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  toTypedArray(): Array<T> on Collection<T>
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 -MutableMap
  all((Entry<K, V>) -> Boolean): Boolean on Map<out K, V>
  also((T) -> Unit): T on <T>
  any((Entry<K, V>) -> Boolean): Boolean on Map<out K, V>
  any(): Boolean on Map<out K, V>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<Entry<K, V>> on Map<out K, V>
  asSequence(): Sequence<Entry<K, V>> on Map<out K, V>
  clear(): Unit
  compute(K, BiFunction<in K, in V?, out V?>): V?
  computeIfAbsent(K, Function<in K, out V>): V
  computeIfPresent(K, BiFunction<in K, in V & Any, out V?>): V?
  contains(K): Boolean on Map<out K, V>
  containsKey(K): Boolean
  containsKey(K): Boolean on Map<out K, *>
  containsValue(V): Boolean
  containsValue(V): Boolean on Map<K, V>
  count((Entry<K, V>) -> Boolean): Int on Map<out K, V>
  count(): Int on Map<out K, V>
  entries: MutableSet<MutableMap.MutableEntry<K, V>>
  equals(Any?): Boolean
  filter((Entry<K, V>) -> Boolean): Map<K, V> on Map<out K, V>
  filterKeys((K) -> Boolean): Map<K, V> on Map<out K, V>
  filterNot((Entry<K, V>) -> Boolean): Map<K, V> on Map<out K, V>
  filterNotTo(M, (Entry<K, V>) -> Boolean): M on Map<out K, V>
  filterTo(M, (Entry<K, V>) -> Boolean): M on Map<out K, V>
  filterValues((V) -> Boolean): Map<K, V> on Map<out K, V>
  flatMap((Entry<K, V>) -> Iterable<R>): List<R> on Map<out K, V>
  flatMapTo(C, (Entry<K, V>) -> Iterable<R>): C on Map<out K, V>
  forEach((Entry<K, V>) -> Unit): Unit on Map<out K, V>
  forEach(BiConsumer<in K, in V>): Unit
  get(K): V?
  get(K): V? on Map<out K, V>
  getOrDefault(K, V): V
  getOrDefault(K, V): V on Map<out K, V>
  getOrElse(K, () -> V): V on Map<K, V>
  getOrElseNullable(K, () -> V): V on Map<K, V>
  getOrImplicitDefault(K): V on Map<K, V>
  getOrPut(K, () -> V): V on MutableMap<K, V>
  getValue(Any?, KProperty<*>): V on MutableMap<in String, in V>
  getValue(Any?, KProperty<*>): V1 on Map<in String, V>
  getValue(K): V on Map<K, V>
  hashCode(): Int
  isEmpty(): Boolean
  isNotEmpty(): Boolean on Map<out K, V>
  iterator(): Iterator<Entry<K, V>> on Map<out K, V>
  iterator(): MutableIterator<MutableEntry<K, V>> on MutableMap<K, V>
  javaClass: Class<T> on <T>
  keys: MutableSet<K>
  let((T) -> R): R on <T>
  map((Entry<K, V>) -> R): List<R> on Map<out K, V>
  mapKeys((Entry<K, V>) -> R): Map<R, V> on Map<out K, V>
  mapKeysTo(M, (Entry<K, V>) -> R): M on Map<out K, V>
  mapNotNull((Entry<K, V>) -> R?): List<R> on Map<out K, V>
  mapNotNullTo(C, (Entry<K, V>) -> R?): C on Map<out K, V>
  mapTo(C, (Entry<K, V>) -> R): C on Map<out K, V>
  mapValues((Entry<K, V>) -> R): Map<K, R> on Map<out K, V>
  mapValuesInPlace((Entry<K, V>) -> R): MutableMap<K, R> on MutableMap<K, V>
  mapValuesTo(M, (Entry<K, V>) -> R): M on Map<out K, V>
  maxBy((Entry<K, V>) -> R): Entry<K, V>? on Map<out K, V>
  maxWith(Comparator<in Entry<K, V>>): Entry<K, V>? on Map<out K, V>
  merge(K, V & Any, BiFunction<in V & Any, in V & Any, out V?>): V?
  minBy((Entry<K, V>) -> R): Entry<K, V>? on Map<out K, V>
  minus(Array<out K>): Map<K, V> on Map<out K, V>
  minus(Iterable<K>): Map<K, V> on Map<out K, V>
  minus(K): Map<K, V> on Map<out K, V>
  minus(Sequence<K>): Map<K, V> on Map<out K, V>
  minusAssign(Array<out K>): Unit on MutableMap<K, V>
  minusAssign(Iterable<K>): Unit on MutableMap<K, V>
  minusAssign(K): Unit on MutableMap<K, V>
  minusAssign(Sequence<K>): Unit on MutableMap<K, V>
  minWith(Comparator<in Entry<K, V>>): Entry<K, V>? on Map<out K, V>
  -MutableEntry
   also((T) -> Unit): T on <T>
   apply(T() -> Unit): T on <T>
   component1(): K on Entry<K, V>
   component2(): V on Entry<K, V>
   equals(Any?): Boolean
   hashCode(): Int
   javaClass: Class<T> on <T>
   key: K
   let((T) -> R): R on <T>
   onAny() on Any
   onAnyFromLibrary(): Unit on Any
   onAnyFromLibraryInternal(): Unit on Any
   onAnyNullable() on Any?
   run(T() -> R): R on <T>
   setValue(V): V
   takeIf((T) -> Boolean): T? on <T>
   takeUnless((T) -> Boolean): T? on <T>
   to(B): Pair<A, B> on <A>
   toPair(): Pair<K, V> on Entry<K, V>
   toString(): String
   toString(): String on Any?
   toString(): String on Any?
   value: V
  none((Entry<K, V>) -> Boolean): Boolean on Map<out K, V>
  none(): Boolean on Map<out K, V>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((Entry<K, V>) -> Unit): M on <M>
  optimizeReadOnlyMap(): Map<K, V> on Map<K, V>
  orEmpty(): Map<K, V> on Map<K, V>?
  plus(Array<out Pair<K, V>>): Map<K, V> on Map<out K, V>
  plus(Iterable<Pair<K, V>>): Map<K, V> on Map<out K, V>
  plus(Map<out K, V>): Map<K, V> on Map<out K, V>
  plus(Pair<K, V>): Map<K, V> on Map<out K, V>
  plus(Sequence<Pair<K, V>>): Map<K, V> on Map<out K, V>
  plusAssign(Array<out Pair<K, V>>): Unit on MutableMap<in K, in V>
  plusAssign(Iterable<Pair<K, V>>): Unit on MutableMap<in K, in V>
  plusAssign(Map<K, V>): Unit on MutableMap<in K, in V>
  plusAssign(Pair<K, V>): Unit on MutableMap<in K, in V>
  plusAssign(Sequence<Pair<K, V>>): Unit on MutableMap<in K, in V>
  put(K, V): V?
  putAll(Array<out Pair<K, V>>): Unit on MutableMap<in K, in V>
  putAll(Iterable<Pair<K, V>>): Unit on MutableMap<in K, in V>
  putAll(Map<out K, V>): Unit
  putAll(Sequence<Pair<K, V>>): Unit on MutableMap<in K, in V>
  putIfAbsent(K, V): V?
  remove(K): V?
  remove(K): V? on MutableMap<out K, V>
  remove(K, V): Boolean
  remove(K, V): Boolean on MutableMap<out K, out V>
  replace(K, V): V?
  replace(K, V, V): Boolean
  replaceAll(BiFunction<in K, in V, out V>): Unit
  run(T() -> R): R on <T>
  set(K, V): Unit on MutableMap<K, V>
  setValue(Any?, KProperty<*>, V): Unit on MutableMap<in String, in V>
  size: Int
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  to(B): Pair<A, B> on <A>
  toList(): List<Pair<K, V>> on Map<out K, V>
  toMap(): Map<K, V> on Map<out K, V>
  toMap(M): M on Map<out K, V>
  toMutableMap(): MutableMap<K, V> on Map<out K, V>
  toProperties(): Properties on Map<String, String>
  toSingletonMap(): Map<K, V> on Map<out K, V>
  toSingletonMapOrSelf(): Map<K, V> on Map<K, V>
  toSortedMap(): SortedMap<K, V> on Map<out K, V>
  toSortedMap(Comparator<in K>): SortedMap<K, V> on Map<out K, V>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  values: MutableCollection<V>
  withDefault((K) -> V): Map<K, V> on Map<K, V>
  withDefault((K) -> V): MutableMap<K, V> on MutableMap<K, V>
 -MutableSet
  aaa() on Collection<Any>
  add(E): Boolean
  addAll(Array<out T>): Boolean on MutableCollection<in T>
  addAll(Collection<E>): Boolean
  addAll(Iterable<T>): Boolean on MutableCollection<in T>
  addAll(Sequence<T>): Boolean on MutableCollection<in T>
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  clear(): Unit
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  contains(T): Boolean on Iterable<T>
  containsAll(Collection<T>): Boolean on Collection<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Collection<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrNull(Int): T? on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in E!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(T): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  indices: IntRange on Collection<*>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  isNotEmpty(): Boolean on Collection<T>
  iterator(): MutableIterator<E>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last(): T on Iterable<T>
  lastIndexOf(T): Int on Iterable<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull(): T? on Iterable<T>
  let((T) -> R): R on <T>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Array<out T>): Set<T> on Set<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Iterable<T>): Set<T> on Set<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(Sequence<T>): Set<T> on Set<T>
  minus(T): List<T> on Iterable<T>
  minus(T): Set<T> on Set<T>
  minusAssign(Array<T>): Unit on MutableCollection<in T>
  minusAssign(Iterable<T>): Unit on MutableCollection<in T>
  minusAssign(Sequence<T>): Unit on MutableCollection<in T>
  minusAssign(T): Unit on MutableCollection<in T>
  minusElement(T): List<T> on Iterable<T>
  minusElement(T): Set<T> on Set<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  optimizeReadOnlySet(): Set<T> on Set<T>
  orEmpty(): Collection<T> on Collection<T>?
  orEmpty(): Set<T> on Set<T>?
  parallelStream(): Stream<E>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Collection<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Array<out T>): Set<T> on Set<T>
  plus(Iterable<T>): List<T> on Collection<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Iterable<T>): Set<T> on Set<T>
  plus(Sequence<T>): List<T> on Collection<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(Sequence<T>): Set<T> on Set<T>
  plus(T): List<T> on Collection<T>
  plus(T): List<T> on Iterable<T>
  plus(T): Set<T> on Set<T>
  plusAssign(Array<T>): Unit on MutableCollection<in T>
  plusAssign(Iterable<T>): Unit on MutableCollection<in T>
  plusAssign(Sequence<T>): Unit on MutableCollection<in T>
  plusAssign(T): Unit on MutableCollection<in T>
  plusElement(T): List<T> on Collection<T>
  plusElement(T): List<T> on Iterable<T>
  plusElement(T): Set<T> on Set<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  remove(E): Boolean
  remove(T): Boolean on MutableCollection<out T>
  removeAll((T) -> Boolean): Boolean on MutableIterable<T>
  removeAll(Array<out T>): Boolean on MutableCollection<in T>
  removeAll(Collection<E>): Boolean
  removeAll(Collection<T>): Boolean on MutableCollection<out T>
  removeAll(Iterable<T>): Boolean on MutableCollection<in T>
  removeAll(Sequence<T>): Boolean on MutableCollection<in T>
  removeIf(Predicate<in E>): Boolean
  requireNoNulls(): Iterable<T> on Iterable<T?>
  retainAll((T) -> Boolean): Boolean on MutableIterable<T>
  retainAll(Array<out T>): Boolean on MutableCollection<in T>
  retainAll(Collection<E>): Boolean
  retainAll(Collection<T>): Boolean on MutableCollection<out T>
  retainAll(Iterable<T>): Boolean on MutableCollection<in T>
  retainAll(Sequence<T>): Boolean on MutableCollection<in T>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  stream(): Stream<E>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toBooleanArray(): BooleanArray on Collection<Boolean>
  toByteArray(): ByteArray on Collection<Byte>
  toCharArray(): CharArray on Collection<Char>
  toCollection(C): C on Iterable<T>
  toDoubleArray(): DoubleArray on Collection<Double>
  toFloatArray(): FloatArray on Collection<Float>
  toHashSet(): HashSet<T> on Iterable<T>
  toIntArray(): IntArray on Collection<Int>
  toList(): List<T> on Iterable<T>
  toLongArray(): LongArray on Collection<Long>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Collection<T>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toShortArray(): ShortArray on Collection<Short>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  toTypedArray(): Array<T> on Collection<T>
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>
 -Set
  aaa() on Collection<Any>
  all((T) -> Boolean): Boolean on Iterable<T>
  also((T) -> Unit): T on <T>
  any((T) -> Boolean): Boolean on Iterable<T>
  any(): Boolean on Iterable<T>
  apply(T() -> Unit): T on <T>
  asIterable(): Iterable<T> on Iterable<T>
  asSequence(): Sequence<T> on Iterable<T>
  associate((T) -> Pair<K, V>): Map<K, V> on Iterable<T>
  associateBy((T) -> K): Map<K, T> on Iterable<T>
  associateBy((T) -> K, (T) -> V): Map<K, V> on Iterable<T>
  associateByTo(M, (T) -> K): M on Iterable<T>
  associateByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  associateTo(M, (T) -> Pair<K, V>): M on Iterable<T>
  average(): Double on Iterable<Byte>
  average(): Double on Iterable<Double>
  average(): Double on Iterable<Float>
  average(): Double on Iterable<Int>
  average(): Double on Iterable<Long>
  average(): Double on Iterable<Short>
  collectionSizeOrDefault(Int): Int on Iterable<T>
  collectionSizeOrNull(): Int? on Iterable<T>
  contains(E): Boolean
  contains(T): Boolean on Iterable<T>
  containsAll(Collection<E>): Boolean
  containsAll(Collection<T>): Boolean on Collection<T>
  convertToSetForSetOperation(): Collection<T> on Iterable<T>
  convertToSetForSetOperationWith(Iterable<T>): Collection<T> on Iterable<T>
  count((T) -> Boolean): Int on Iterable<T>
  count(): Int on Collection<T>
  count(): Int on Iterable<T>
  distinct(): List<T> on Iterable<T>
  distinctBy((T) -> K): List<T> on Iterable<T>
  drop(Int): List<T> on Iterable<T>
  dropWhile((T) -> Boolean): List<T> on Iterable<T>
  elementAt(Int): T on Iterable<T>
  elementAtOrElse(Int, (Int) -> T): T on Iterable<T>
  elementAtOrNull(Int): T? on Iterable<T>
  equals(Any?): Boolean
  filter((T) -> Boolean): List<T> on Iterable<T>
  filterIndexed((Int, T) -> Boolean): List<T> on Iterable<T>
  filterIndexedTo(C, (Int, T) -> Boolean): C on Iterable<T>
  filterIsInstance(): List<R> on Iterable<*>
  filterIsInstance(Class<R>): List<R> on Iterable<*>
  filterIsInstanceTo(C): C on Iterable<*>
  filterIsInstanceTo(C, Class<R>): C on Iterable<*>
  filterNot((T) -> Boolean): List<T> on Iterable<T>
  filterNotNull(): List<T> on Iterable<T?>
  filterNotNullTo(C): C on Iterable<T?>
  filterNotTo(C, (T) -> Boolean): C on Iterable<T>
  filterTo(C, (T) -> Boolean): C on Iterable<T>
  find((T) -> Boolean): T? on Iterable<T>
  findLast((T) -> Boolean): T? on Iterable<T>
  first((T) -> Boolean): T on Iterable<T>
  first(): T on Iterable<T>
  firstOrNull((T) -> Boolean): T? on Iterable<T>
  firstOrNull(): T? on Iterable<T>
  flatMap((T) -> Iterable<R>): List<R> on Iterable<T>
  flatMapTo(C, (T) -> Iterable<R>): C on Iterable<T>
  flatten(): List<T> on Iterable<Iterable<T>>
  fold(R, (R, T) -> R): R on Iterable<T>
  foldIndexed(R, (Int, R, T) -> R): R on Iterable<T>
  forEach((T) -> Unit): Unit on Iterable<T>
  forEach(Consumer<in E!>!): Unit
  forEachIndexed((Int, T) -> Unit): Unit on Iterable<T>
  groupBy((T) -> K): Map<K, List<T>> on Iterable<T>
  groupBy((T) -> K, (T) -> V): Map<K, List<V>> on Iterable<T>
  groupByTo(M, (T) -> K): M on Iterable<T>
  groupByTo(M, (T) -> K, (T) -> V): M on Iterable<T>
  groupingBy((T) -> K): Grouping<T, K> on Iterable<T>
  hashCode(): Int
  indexOf(T): Int on Iterable<T>
  indexOfFirst((T) -> Boolean): Int on Iterable<T>
  indexOfLast((T) -> Boolean): Int on Iterable<T>
  indices: IntRange on Collection<*>
  intersect(Iterable<T>): Set<T> on Iterable<T>
  isEmpty(): Boolean
  isNotEmpty(): Boolean on Collection<T>
  iterator(): Iterator<E>
  javaClass: Class<T> on <T>
  joinTo(A, CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): A on Iterable<T>
  joinToString(CharSequence, CharSequence, CharSequence, Int, CharSequence, ((T) -> CharSequence?)): String on Iterable<T>
  last((T) -> Boolean): T on Iterable<T>
  last(): T on Iterable<T>
  lastIndexOf(T): Int on Iterable<T>
  lastOrNull((T) -> Boolean): T? on Iterable<T>
  lastOrNull(): T? on Iterable<T>
  let((T) -> R): R on <T>
  map((T) -> R): List<R> on Iterable<T>
  mapIndexed((Int, T) -> R): List<R> on Iterable<T>
  mapIndexedNotNull((Int, T) -> R?): List<R> on Iterable<T>
  mapIndexedNotNullTo(C, (Int, T) -> R?): C on Iterable<T>
  mapIndexedTo(C, (Int, T) -> R): C on Iterable<T>
  mapNotNull((T) -> R?): List<R> on Iterable<T>
  mapNotNullTo(C, (T) -> R?): C on Iterable<T>
  mapTo(C, (T) -> R): C on Iterable<T>
  max(): Double? on Iterable<Double>
  max(): Float? on Iterable<Float>
  max(): T? on Iterable<T>
  maxBy((T) -> R): T? on Iterable<T>
  maxWith(Comparator<in T>): T? on Iterable<T>
  min(): Double? on Iterable<Double>
  min(): Float? on Iterable<Float>
  min(): T? on Iterable<T>
  minBy((T) -> R): T? on Iterable<T>
  minus(Array<out T>): List<T> on Iterable<T>
  minus(Array<out T>): Set<T> on Set<T>
  minus(Iterable<T>): List<T> on Iterable<T>
  minus(Iterable<T>): Set<T> on Set<T>
  minus(Sequence<T>): List<T> on Iterable<T>
  minus(Sequence<T>): Set<T> on Set<T>
  minus(T): List<T> on Iterable<T>
  minus(T): Set<T> on Set<T>
  minusElement(T): List<T> on Iterable<T>
  minusElement(T): Set<T> on Set<T>
  minWith(Comparator<in T>): T? on Iterable<T>
  none((T) -> Boolean): Boolean on Iterable<T>
  none(): Boolean on Iterable<T>
  onAny() on Any
  onAnyFromLibrary(): Unit on Any
  onAnyFromLibraryInternal(): Unit on Any
  onAnyNullable() on Any?
  onEach((T) -> Unit): C on <C>
  optimizeReadOnlySet(): Set<T> on Set<T>
  orEmpty(): Collection<T> on Collection<T>?
  orEmpty(): Set<T> on Set<T>?
  parallelStream(): Stream<E>
  partition((T) -> Boolean): Pair<List<T>, List<T>> on Iterable<T>
  plus(Array<out T>): List<T> on Collection<T>
  plus(Array<out T>): List<T> on Iterable<T>
  plus(Array<out T>): Set<T> on Set<T>
  plus(Iterable<T>): List<T> on Collection<T>
  plus(Iterable<T>): List<T> on Iterable<T>
  plus(Iterable<T>): Set<T> on Set<T>
  plus(Sequence<T>): List<T> on Collection<T>
  plus(Sequence<T>): List<T> on Iterable<T>
  plus(Sequence<T>): Set<T> on Set<T>
  plus(T): List<T> on Collection<T>
  plus(T): List<T> on Iterable<T>
  plus(T): Set<T> on Set<T>
  plusElement(T): List<T> on Collection<T>
  plusElement(T): List<T> on Iterable<T>
  plusElement(T): Set<T> on Set<T>
  reduce((S, T) -> S): S on Iterable<T>
  reduceIndexed((Int, S, T) -> S): S on Iterable<T>
  requireNoNulls(): Iterable<T> on Iterable<T?>
  reversed(): List<T> on Iterable<T>
  run(T() -> R): R on <T>
  single((T) -> Boolean): T on Iterable<T>
  single(): T on Iterable<T>
  singleOrNull((T) -> Boolean): T? on Iterable<T>
  singleOrNull(): T? on Iterable<T>
  size: Int
  sorted(): List<T> on Iterable<T>
  sortedBy((T) -> R?): List<T> on Iterable<T>
  sortedByDescending((T) -> R?): List<T> on Iterable<T>
  sortedDescending(): List<T> on Iterable<T>
  sortedWith(Comparator<in T>): List<T> on Iterable<T>
  spliterator(): Spliterator<E?>
  stream(): Stream<E>
  subtract(Iterable<T>): Set<T> on Iterable<T>
  sum(): Double on Iterable<Double>
  sum(): Float on Iterable<Float>
  sum(): Int on Iterable<Byte>
  sum(): Int on Iterable<Int>
  sum(): Int on Iterable<Short>
  sum(): Long on Iterable<Long>
  sumBy((T) -> Int): Int on Iterable<T>
  sumByDouble((T) -> Double): Double on Iterable<T>
  take(Int): List<T> on Iterable<T>
  takeIf((T) -> Boolean): T? on <T>
  takeUnless((T) -> Boolean): T? on <T>
  takeWhile((T) -> Boolean): List<T> on Iterable<T>
  to(B): Pair<A, B> on <A>
  toBooleanArray(): BooleanArray on Collection<Boolean>
  toByteArray(): ByteArray on Collection<Byte>
  toCharArray(): CharArray on Collection<Char>
  toCollection(C): C on Iterable<T>
  toDoubleArray(): DoubleArray on Collection<Double>
  toFloatArray(): FloatArray on Collection<Float>
  toHashSet(): HashSet<T> on Iterable<T>
  toIntArray(): IntArray on Collection<Int>
  toList(): List<T> on Iterable<T>
  toLongArray(): LongArray on Collection<Long>
  toMap(): Map<K, V> on Iterable<Pair<K, V>>
  toMap(M): M on Iterable<Pair<K, V>>
  toMutableList(): MutableList<T> on Collection<T>
  toMutableList(): MutableList<T> on Iterable<T>
  toMutableSet(): MutableSet<T> on Iterable<T>
  toSet(): Set<T> on Iterable<T>
  toShortArray(): ShortArray on Collection<Short>
  toSortedSet(): SortedSet<T> on Iterable<T>
  toSortedSet(Comparator<in T>): SortedSet<T> on Iterable<T>
  toString(): String
  toString(): String on Any?
  toString(): String on Any?
  toTypedArray(): Array<T> on Collection<T>
  union(Iterable<T>): Set<T> on Iterable<T>
  unzip(): Pair<List<T>, List<R>> on Iterable<Pair<T, R>>
  withIndex(): Iterable<IndexedValue<T>> on Iterable<T>
  zip(Array<out R>): List<Pair<T, R>> on Iterable<T>
  zip(Array<out R>, (T, R) -> V): List<V> on Iterable<T>
  zip(Iterable<R>): List<Pair<T, R>> on Iterable<T>
  zip(Iterable<R>, (T, R) -> V): List<V> on Iterable<T>