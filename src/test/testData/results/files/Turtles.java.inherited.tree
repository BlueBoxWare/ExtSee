-Turtles.java
 -All
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  javaClass on T
  let((T) -> R) on T
  methodOnAll(): void
  methodOnNinja(): void
  methodOnTurtles(): void
  notify(): void
  notifyAll(): void
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  onTurtles() on Turtles
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString(): String
  toString() on Any?
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnTurtles: int
 -Down
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  javaClass on T
  let((T) -> R) on T
  methodOnAll(): void
  methodOnDown(): void
  methodOnNinja(): void
  methodOnPower(): void
  methodOnThe(): void
  methodOnTurtles(): void
  methodOnWay(): void
  notify(): void
  notifyAll(): void
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onDown() on Down
  onNinja() on Ninja
  onPower() on Power
  onThe() on The
  onTurtles() on Turtles
  onWay() on Way
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString(): String
  toString() on Any?
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnDown: int
  fieldOnThe: int
  fieldOnTurtles: int
  fieldOnWay: int
 -Ninja
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  methodOnNinja(): void
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -Power
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  javaClass on T
  let((T) -> R) on T
  methodOnPower(): void
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onPower() on Power
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString() on Any?
 -The
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  javaClass on T
  let((T) -> R) on T
  methodOnAll(): void
  methodOnNinja(): void
  methodOnPower(): void
  methodOnThe(): void
  methodOnTurtles(): void
  notify(): void
  notifyAll(): void
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  onPower() on Power
  onThe() on The
  onTurtles() on Turtles
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString(): String
  toString() on Any?
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnThe: int
  fieldOnTurtles: int
 -Turtles
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  javaClass on T
  let((T) -> R) on T
  methodOnTurtles(): void
  notify(): void
  notifyAll(): void
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onTurtles() on Turtles
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString(): String
  toString() on Any?
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnTurtles: int
 -Way
  also((T) -> kotlin.Unit) on T
  apply(T.() -> kotlin.Unit) on T
  equals(Object): boolean
  getClass(): Class<?>
  hashCode(): int
  javaClass on T
  let((T) -> R) on T
  methodOnAll(): void
  methodOnNinja(): void
  methodOnPower(): void
  methodOnThe(): void
  methodOnTurtles(): void
  methodOnWay(): void
  notify(): void
  notifyAll(): void
  onAll() on All
  onAny() on Any
  onAnyFromLibrary() on Any
  onAnyNullable() on Any?
  onNinja() on Ninja
  onPower() on Power
  onThe() on The
  onTurtles() on Turtles
  onWay() on Way
  run(T.() -> R) on T
  takeIf((T) -> kotlin.Boolean) on T
  takeUnless((T) -> kotlin.Boolean) on T
  to(B) on A
  toString(): String
  toString() on Any?
  wait(): void
  wait(long): void
  wait(long, int): void
  fieldOnAll: int
  fieldOnThe: int
  fieldOnTurtles: int
  fieldOnWay: int
